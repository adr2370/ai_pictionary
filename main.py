import subprocess
import os
import sys
import argparse
import glob
import time
from datetime import datetime

# Optional: pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client
# from googleapiclient.discovery import build
# from googleapiclient.http import MediaFileUpload
# from google_auth_oauthlib.flow import InstalledAppFlow
# from google.auth.transport.requests import Request
# import pickle

GAMES_DIR = os.path.join(os.path.dirname(__file__), 'games')
VIDEO_SCRIPT = os.path.join(os.path.dirname(__file__), 'pictionary-python-generator.py')
NODE_GAME_SCRIPT = os.path.join(os.path.dirname(__file__), 'pictionary-chain-local.js')


def run_js_game():
    print("[1/4] Running Pictionary game (Node.js)...")
    result = subprocess.run(['node', NODE_GAME_SCRIPT], check=True)
    print("Game finished.")


def find_latest_game_dir():
    print("[2/4] Locating latest game directory...")
    game_dirs = [d for d in glob.glob(os.path.join(GAMES_DIR, 'pictionary_game_*')) if os.path.isdir(d)]
    if not game_dirs:
        raise FileNotFoundError("No game directories found.")
    latest = max(game_dirs, key=os.path.getmtime)
    print(f"Latest game directory: {latest}")
    return latest


def generate_video(game_dir, part_number=None):
    print(f"[3/4] Generating video from game session (Part {part_number})...")
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_name = f"pictionary_chain_{timestamp}_part{part_number}.mp4" if part_number else f"pictionary_chain_{timestamp}.mp4"
    output_path = os.path.join(game_dir, output_name)
    cmd = [
        sys.executable, VIDEO_SCRIPT,
        '--game-dir', game_dir,
        '--output', output_name
    ]
    if part_number:
        cmd += ['--part', str(part_number)]
    subprocess.run(cmd, check=True)
    print(f"Video generated: {output_path}")
    return output_path


def upload_to_youtube(video_path, part_number=None):
    print(f"[4/4] Uploading video to YouTube (Part {part_number})...")
    print("(YouTube upload logic not implemented. See comments for setup.)")
    # ---
    # To enable YouTube uploads:
    # 1. Set up a Google Cloud project and enable the YouTube Data API v3.
    # 2. Download OAuth 2.0 credentials (client_secrets.json) and place in this directory.
    # 3. Uncomment the import statements above and the code below.
    # 4. Follow the YouTube API quickstart for Python:
    #    https://developers.google.com/youtube/v3/quickstart/python
    #
    # SCOPES = ["https://www.googleapis.com/auth/youtube.upload"]
    # creds = None
    # if os.path.exists('token.pickle'):
    #     with open('token.pickle', 'rb') as token:
    #         creds = pickle.load(token)
    # if not creds or not creds.valid:
    #     if creds and creds.expired and creds.refresh_token:
    #         creds.refresh(Request())
    #     else:
    #         flow = InstalledAppFlow.from_client_secrets_file('client_secrets.json', SCOPES)
    #         creds = flow.run_local_server(port=0)
    #     with open('token.pickle', 'wb') as token:
    #         pickle.dump(creds, token)
    # youtube = build('youtube', 'v3', credentials=creds)
    # request = youtube.videos().insert(
    #     part="snippet,status",
    #     body={
    #         "snippet": {
    #             "title": f"AI Pictionary Chain Game Part {part_number}" if part_number else "AI Pictionary Chain Game",
    #             "description": "Generated by AI Pictionary Chain Game Bot.",
    #             "tags": ["AI", "Pictionary", "Game", "TikTok", "Chain"]
    #         },
    #         "status": {"privacyStatus": "unlisted"}
    #     },
    #     media_body=MediaFileUpload(video_path)
    # )
    # response = request.execute()
    # print(f"Video uploaded: https://youtu.be/{response['id']}")
    # ---
    print(f"(Simulated upload: {video_path})")


def main():
    parser = argparse.ArgumentParser(description="Orchestrate AI Pictionary game, video generation, and YouTube upload.")
    parser.add_argument('--dry-run', action='store_true', help='Run everything except the YouTube upload step.')
    parser.add_argument('--count', type=int, default=1, help='Number of videos to create in a row (default: 1)')
    parser.add_argument('--start-part', type=int, default=1, help='Part number to start on (default: 1)')
    args = parser.parse_args()

    try:
        for i in range(args.count):
            part_number = args.start_part + i
            print(f"\n=== Starting video creation for Part {part_number} ===")
            run_js_game()
            game_dir = find_latest_game_dir()
            video_path = generate_video(game_dir, part_number=part_number)
            if args.dry_run:
                print("[DRY RUN] Skipping YouTube upload.")
            else:
                upload_to_youtube(video_path, part_number=part_number)
            print(f"All steps completed for Part {part_number}.")
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 